/**========================================================================
 *                           Premiere maniere de faire une layout
 *========================================================================**/
import Layout1 from "@/components/Layout1";
// import "@/styles/globals.css";
import { NextComponentType, NextPageContext } from "next";
import type { AppProps } from "next/app";
import Head from "next/head";
import { ApolloClient, InMemoryCache, ApolloProvider } from "@apollo/client";
// import ShopContextProvider from "@/contextes/ShopContext";
import dynamic from "next/dynamic";
const ShopContextProvider = dynamic(() => import('@/contextes/ShopContext'), { ssr: false })


const client = new ApolloClient({
  uri: "http://localhost:4000",
  cache: new InMemoryCache({ addTypename: false }),
  // defaultOptions: {
  // watchQuery: { fetchPolicy: "no-cache", nextFetchPolicy: "no-cache" },
  // },
});
interface ComponentWithTitle extends AppProps {
  Component: NextComponentType<NextPageContext, any, any> & {
    title?: string;
  };
}

export default function App({ Component, pageProps }: ComponentWithTitle) {
  return (
    <>
      <ShopContextProvider>
        <ApolloProvider client={client}>
          <Head>
            <title>{Component.title ?? "The good corner"}</title>
            <meta name="description" content="Generated by create next app" />
            <meta
              name="viewport"
              content="width=device-width, initial-scale=1"
            />
            <link rel="icon" href="/favicon.ico" />
          </Head>

          <Layout1>
            <Component {...pageProps} />
          </Layout1>
        </ApolloProvider>
      </ShopContextProvider>
    </>
  );
}
/**========================================================================
 *                           DEUXIEME MANIERE DE FAIRE UNE LAYOUT
 *========================================================================**/

// import "@/styles/globals.css";
// import type { AppProps } from "next/app";
// import { NextComponentType, NextPageContext } from "next/types";

// interface ComponentWithLayout extends AppProps {
//   Component: NextComponentType<NextPageContext, any, any> & {
//     getLayout(Component: JSX.Element): JSX.Element;
//   };
// }
// export default function App({ Component, pageProps }: ComponentWithLayout) {
//   // export default function App({ Component, pageProps }: AppProps) {
//   const getLayout = Component.getLayout || ((page: any) => page);//si jamais j'ai défini un getLayout dans le composant à rendre, on le stocke DANS cette variable, sinon c'est la page par défaut
//   return getLayout(<Component {...pageProps} />);

//   // return <Component {...pageProps} />
// }

// // Disabling SSR
// export default dynamic(() => Promise.resolve(App), { ssr: false });
